[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Algorithm",
    "section": "",
    "text": "정렬\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\n김진실\n\n\n\n\n\n\n\n\n\n\n\n\nStack\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\n김진실\n\n\n\n\n\n\n\n\n\n\n\n\n검색\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\n김진실\n\n\n\n\n\n\n\n\n\n\n\n\n패턴 매칭\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\n김진실\n\n\n\n\n\n\n\n\n\n\n\n\n배열\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\n김진실\n\n\n\n\n\n\n\n\n\n\n\n\nDFS\n\n\n\n\n\n\n\n\n\n\n\nAug 7, 2024\n\n\n김진실\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/DFS.html",
    "href": "posts/DFS.html",
    "title": "DFS",
    "section": "",
    "text": "- 인접 리스트, 재귀, 스택"
  },
  {
    "objectID": "posts/DFS.html#입력",
    "href": "posts/DFS.html#입력",
    "title": "DFS",
    "section": "0. 입력",
    "text": "0. 입력\n# V: 노드의 개수\n# E: 인접한 노드 쌍의 개수\nV, E = 5, 5\n# edges: 인접한 노드 쌍\nedges = [1, 2, 1, 3, 2, 4, 2, 5, 4, 5]"
  },
  {
    "objectID": "posts/DFS.html#인접-리스트-생성",
    "href": "posts/DFS.html#인접-리스트-생성",
    "title": "DFS",
    "section": "1. 인접 리스트 생성",
    "text": "1. 인접 리스트 생성\n# 리스트로 구현\ngraph = [[] for _ in range(V+1)]\n\n# 딕셔너리로 구현\n# 노드가 숫자가 아닐 때도 사용 가능\ngraph = {i+1:[] for i in range(V)}\nfrom collections import defaultdict\ngraph = defaultdict(list)\n\n# 인접 리스트 생성\nfor i in range(E):\n    # 2개가 한 묶음\n    v1, v2 = edges[i*2], edges[i*2+1]\n    # 양방향 그래프\n    graph[v1].append(v2)\n    graph[v2].append(v1)\n\n# 인접한 노드 중 노드 번호가 작은 것부터 방문 (리스트)\nfor node, edges in enumerate(graph):\n    # 재귀\n    graph[node] = sorted(edges)\n    # 스택\n    graph[node] = sorted(edges, reverse=True)\n\n# 인접한 노드 중 노드 번호가 작은 것부터 방문 (딕셔너리)\nfor node, edges in graph.items():\n    # 재귀\n    graph[node] = sorted(edges)\n    # 스택\n    graph[node] = sorted(edges, reverse=True)"
  },
  {
    "objectID": "posts/DFS.html#함수-구현",
    "href": "posts/DFS.html#함수-구현",
    "title": "DFS",
    "section": "2. 함수 구현",
    "text": "2. 함수 구현\n\n2-1. 재귀\ndef dfs_recursive(cur_node):\n    # 방문한 노드 처리\n    visited[cur_node] = 1\n    print(cur_node, end=' ')\n\n    # 현재 노드와 인접한 다음 노드 탐색\n    for next_node in graph[cur_node]:\n        # 방문한 적이 없는 노드라면\n        if not visited[next_node]:\n            # 방문하기\n            dfs_recursive(next_node)\n\n\nvisited = [0] * (V+1)\ndfs_recursive(1)\n\n\n2-2. 스택\n\n방법1\n\ndef dfs_stack1(start_node):\n    stack = [start_node]\n\n    # stack에 남은 것이 없을 때까지 반복\n    while stack:\n        cur_node = stack.pop()\n\n        # 방문한 적이 있는 경우 재방문 X\n        if visited[cur_node]:\n            continue\n\n        # 방문한 노드 처리\n        visited[cur_node] = 1\n        print(cur_node, end=' ')\n\n        # 현재 노드와 연결된 노드 중 방문하지 않은 노드만 stack에 추가\n        for next_node in graph[cur_node]:\n            if not visited[next_node]:\n                stack.append(next_node)\n\n\nvisited = [0] * (V+1)\ndfs_stack1(1)\n\n방법2\n\ndef dfs_stack2(start_node):\n    stack = []\n    print(start_node)\n\n    # 시작 노드 방문 처리\n    visited[start_node] = 1\n    cur_node = start_node\n\n    while True:\n\n        # v에 인접한 노드 중\n        for next_node in adjL[cur_node]:\n\n            # 방문하지 않은 노드가 있으면\n            if visited[next_node] == 0:\n\n                # stack에 추가하고\n                stack.append(cur_node)\n                cur_node = next_node\n\n                # 방문 처리\n                visited[cur_node] = 1\n                print(cur_node)\n                break\n        \n        # 방문하지 않은 노드가 없어서 for문을 모두 순회한 경우\n        else:\n            # stack에 노드가 남아있다면\n            if stack:\n                # for문 다시 반복\n                cur_node = stack.pop()\n                \n            # stack에 노드가 남아있지 않다면 모든 노드를 방문한 것\n            else:\n                break\n\n\nvisited = [0] * (V+1)\ndfs_stack2(1)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]